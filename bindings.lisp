;;;; CFFI low-level bindings to ncurses.
;;;; Generated by WTF (what-the-ffi)

(in-package #:cl-fu)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:459:9 /usr/include/ncurses.h:459:9)
(defcstruct pdat ;; pdat
  (_pad_y  :SHORT) ;; _pad_y #<VBASE :short>
  (_pad_x  :SHORT) ;; _pad_x #<VBASE :short>
  (_pad_top  :SHORT) ;; _pad_top #<VBASE :short>
  (_pad_left  :SHORT) ;; _pad_left #<VBASE :short>
  (_pad_bottom  :SHORT) ;; _pad_bottom #<VBASE :short>
  (_pad_right  :SHORT) ;; _pad_right #<VBASE :short>
)
(export 'pdat)

;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:421:8 /usr/include/ncurses.h:372:16
;;    /usr/include/ncurses.h:372:16
(defcstruct win ;; win_st
  (_cury  :SHORT) ;; _cury #<VBASE :short>
  (_curx  :SHORT) ;; _curx #<VBASE :short>
  (_maxy  :SHORT) ;; _maxy #<VBASE :short>
  (_maxx  :SHORT) ;; _maxx #<VBASE :short>
  (_begy  :SHORT) ;; _begy #<VBASE :short>
  (_begx  :SHORT) ;; _begx #<VBASE :short>
  (_flags  :SHORT) ;; _flags #<VBASE :short>
  (_attrs  :ULONG) ;; _attrs #<typedef attr_t>
  (_bkgd  :ULONG) ;; _bkgd #<typedef chtype>
  (_notimeout  (:BOOL)) ;; _notimeout #<VBASE :_Bool>
  (_clear  (:BOOL)) ;; _clear #<VBASE :_Bool>
  (_leaveok  (:BOOL)) ;; _leaveok #<VBASE :_Bool>
  (_scroll  (:BOOL)) ;; _scroll #<VBASE :_Bool>
  (_idlok  (:BOOL)) ;; _idlok #<VBASE :_Bool>
  (_idcok  (:BOOL)) ;; _idcok #<VBASE :_Bool>
  (_immed  (:BOOL)) ;; _immed #<VBASE :_Bool>
  (_sync  (:BOOL)) ;; _sync #<VBASE :_Bool>
  (_use_keypad  (:BOOL)) ;; _use_keypad #<VBASE :_Bool>
  (_delay  :INT) ;; _delay #<VBASE :int>
  (_line  :pointer ) ;; _line #<POINTER #<struct ldat>>
  (_regtop  :SHORT) ;; _regtop #<VBASE :short>
  (_regbottom  :SHORT) ;; _regbottom #<VBASE :short>
  (_parx  :INT) ;; _parx #<VBASE :int>
  (_pary  :INT) ;; _pary #<VBASE :int>
  (_parent  (:pointer (:struct win))) ;; _parent #<POINTER #<typedef WINDOW>>
  (_pad  (:struct pdat)) ;; _pad #<struct pdat>
  (_yoffset  :SHORT) ;; _yoffset #<VBASE :short>
)
(export 'win)



(export '(*COLORS* *COLOR-PAIRS* *LINES* *COLS* *TABSIZE*
	  *ECSDELAY* *STDSCR* *CURSCR* *NEWSCR*))

(cffi:defcvar ("COLORS" *COLORS* :library libcurses) :int)
(cffi:defcvar ("COLOR_PAIRS" *COLOR-PAIRS* :library libcurses) :int)

(cffi:defcvar ("LINES" *LINES* :library libcurses) :int)
(cffi:defcvar ("COLS" *COLS* :library libcurses) :int)
(cffi:defcvar ("TABSIZE" *TABSIZE* :library libcurses) :int)
(cffi:defcvar ("ESCDELAY" *ESCDELAY* :library libcurses) :int)

(cffi:defcvar ("stdscr" *STDSCR* :library libcurses) :pointer)
(cffi:defcvar ("curscr" *CURSCR* :library libcurses) :pointer)
(cffi:defcvar ("newscr" *NEWSCR* :library libcurses) :pointer)

(defmacro xdefconst (name value)
  `(progn
     (defparameter ,name ,value)
     (export ',name)))

(defmacro xdefun (name &body body)
  `(progn
     (defun ,name ,@body)
     (export ',name)))

(defmacro xdefcfun ((cname lname) &body body)
  `(progn
     (defcfun (,cname ,lname) ,@body)
     (export ',lname)))


(defmacro defcurse ((cname lname &key (mv t) (ret :int)) &rest parmlist)
  #||(let ((parms (loop for p in parmlist
		  for item = (if (consp p)
				(car p)
				p)
		  collecting item))))
  ||#
  (let ((mv-functions
	 (and mv
	  `((xdefcfun (,(format nil "mv~A" cname)
			,(intern (format nil "MV~A" lname))) ,ret
			(y  :INT) 
			(x  :INT) 
			,@parmlist)
	    (xdefcfun (,(format nil "mvw~A" cname)
			,(intern (format nil "MVW~A" lname))) ,ret
			(win   (:pointer (:struct win)))
			(y  :INT) ;;  #<VBASE :int>
			(x  :INT) ;;  #<VBASE :int>
			,@parmlist)))))
    `(progn
       ;; define low-level cffi bindings
       (xdefcfun (,(format nil "~A" cname) ,(intern (format nil "~A" lname))) ,ret
		 ,@parmlist)
       (xdefcfun (,(format nil "w~A" cname) ,(intern (format nil "W~A" lname))) ,ret
		 (win   (:pointer (:struct win))) 
		 ,@parmlist)
       ,@mv-functions
	 
       ;; define the visible macro
       #| (defmacro ,lname (,@parms &key win y x)
       (let* ((_mv (or y x))
       (sym (find-symbol (format nil "&~A~A~A"
       (if _mv "MV" "")
       (if win "W" "")
       ',lname)))
       (parms (list ,@parms)))

       (when _mv
       (unless (and x y)
       (error "Both y and x must be specified"))
       (push x parms)
       (push y parms))
       (when win
       (push win parms))
       `(,sym ,@parms)))
       (export ',lname)
       ||#)))


;;==============================================================================
;; Initialization and control
;; http://invisible-island.net/ncurses/man/curs_initscr.3x.html
;;------------------------------------------------------------------------------
(xdefcfun ("initscr"  initscr) (:pointer(:struct win)))
(xdefcfun ("endwin"   endwin) :void)
(xdefcfun ("isendwin" isendwin) (:BOOL))

(xdefcfun ("newterm" newterm) :pointer ;;screen
	  (type  :string) 
	  (outfd :pointer)
	  (infd  :pointer))  

(xdefcfun ("set_term" set-term) :pointer ;;screen
	  (screen :pointer))
 
(defcfun ("delscreen" delscreen) :VOID
  	  (screen :pointer))
;;==============================================================================
;; options
;;
;;http://invisible-island.net/ncurses/man/curs_inopts.3x.html
;;
(xdefcfun ("cbreak"   cbreak) :INT)
(xdefcfun ("nocbreak" nocbreak) :INT)
(xdefcfun ("echo"     echo) :INT)
(xdefcfun ("noecho"   noecho) :INT)
(xdefcfun ("halfdelay" halfdelay) :INT
  (tenths  :INT) ;;  #<VBASE :int>
)

(defcfun ("intrflush" intrflush) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf    (:BOOL)) ;;  #<VBASE :_Bool>
)

(xdefcfun ("keypad"    keypad) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf    (:BOOL)) ;;  #<VBASE :_Bool>
)
(xdefcfun ("meta"      meta) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf    (:BOOL)) ;;  #<VBASE :_Bool>
  )

(xdefcfun ("nodelay"   nodelay) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf    (:BOOL)) ;;  #<VBASE :_Bool>
)

(xdefcfun ("raw"       raw) :INT)
(xdefcfun ("noraw"     noraw) :INT)
(xdefcfun ("qiflush"   qiflush) :INT)
(xdefcfun ("noqiflush" noqiflush) :INT)

(xdefcfun ("timeout"   timeout) :INT
  (delay    (:BOOL)) ;;  #<VBASE :_Bool>
  )

(xdefcfun ("wtimeout"  wtimeout) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (delay    (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("notimeout"  notimeout) :INT
  (win   (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (delay    (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("typeahead"  typeahead) :INT
  (fd   :int) )

;;==============================================================================
;; refresh
;;
;; http://invisible-island.net/ncurses/man/curs_refresh.3x.html
;;
(defcurse ("refresh"      refresh      :mv nil) )

(defcurse ("wnoutrefresh" wnoutrefresh :mv nil) )
(xdefcfun ("doupdate"     doupdate) :int)

(xdefcfun ("redrawwin"    redrawwin) :int
	  (win  (:pointer (:struct win))))
(xdefcfun ("wredrawln"    wredrawln) :int
	  (win  (:pointer (:struct win)))
	  (beg  :int)
	  (cnt  :int))
;;==============================================================================
;; http://invisible-island.net/ncurses/man/curs_clear.3x.html

(defcurse ("erase"     erase    :mv nil) )
(defcurse ("clear"     clear    :mv nil) )
(defcurse ("clrtoeol"  clrtoeol :mv nil) )
(defcurse ("clrtobot"  clrtobot :mv nil) )

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_legacy.3x.html
(xdefcfun ("getattrs" getattrs) :int  (win  (:pointer (:struct win))))
(xdefcfun ("getbegx"  getbegx)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getbegy"  getbegy)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getcurx"  getcurx)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getcury"  getcury)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getmaxx"  getmaxx)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getmaxy"  getmaxy)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getparx"  getparx)  :int  (win  (:pointer (:struct win))))
(xdefcfun ("getpary"  getpary)  :int  (win  (:pointer (:struct win))))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_addstr.3x.html
(defcurse ("addstr"    addstr) (str :string))
(defcurse ("addnstr"   addnstr) (str :string) (cnt :int))
;;;http://invisible-island.net/ncurses/man/curs_addchstr.3x.html
(defcurse ("addchstr"  addchstr) (ptr :pointer))
(defcurse ("addchnstr" addchnstr) (ptr :pointer) (cnt :int))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_move.3x.html
(defcurse ("move" move :mv nil) (y :int) (x :int))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_inch.3x.html
(defcurse ("inch"  inch :ret :ulong))

;;http://invisible-island.net/ncurses/man/curs_getch.3x.html
(defcurse ("getch"       getch))
(xdefcfun ("ungetch_key" ungetch) :INT  (ch  :INT) )
(xdefcfun ("has_key"   has-key) :INT  (ch  :INT) )
;;http://invisible-island.net/ncurses/man/curs_printw.3x.html
(defcurse ("printw" printw) (str :string) &rest)


;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_addch.3x.html
(defcurse ("addch" addch) (ch :ulong))
(defcurse ("echochar" echochar :mv nil) (ch :ulong))

;;==============================================================================
;; http://invisible-island.net/ncurses/man/curs_border.3x.html
(defcurse ("border" border :mv nil)
    (ls :ulong) (rs :ulong) (ts :ulong) (bs :ulong)
    (tl :ulong) (tr :ulong) (bl :ulong) (br :ulong))
(xdefcfun ("box" box) :int
	  (win  (:pointer (:struct win)))
	  (verch :ulong)
	  (horch :ulong))
(defcurse ("vline" vline) (ch :ulong))
(defcurse ("hline" hline) (ch :ulong))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_insch.3x.html
(defcurse ("insch"  insch) (ch :ulong))
;;http://invisible-island.net/ncurses/man/curs_insstr.3x.html
(defcurse ("insstr"   insstr) (str :string))
(defcurse ("insnstr"  insnstr) (str :string) (cnt :int))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_attr.3x.html
(xdefconst A-NORMAL     #x00000000)
(xdefconst A-STANDOUT   #x00010000)
(xdefconst A-UNDERLINE  #x00020000)
(xdefconst A-REVERSE    #x00040000)
(xdefconst A-BLINK      #x00080000)
(xdefconst A-DIM        #x00100000)
(xdefconst A-BOLD       #x00200000)
(xdefconst A-ALTCHARSET #x00400000)
(xdefconst A-INVIS      #x00800000)
(xdefconst A-PROTECT    #x01000000)
;;------------------------------------------------------------------------------;; opts should be null
(defcurse ("attr_get" attr-get& :mv nil)
  (attrs  (:pointer :ULONG)) 
  (pair (:pointer :SHORT))
  (opts  (:pointer :VOID)))
(xdefun attr-get ()
	(with-foreign-objects ((pair :short) (attrs :ulong))
	  (attr-get& attrs pair (null-pointer))
	  (values (mem-ref attrs :ulong) (mem-ref pair :short))))
(xdefun wattr-get (w)
	(with-foreign-objects ((pair :short) (attrs :ulong))
	  (wattr-get& w attrs pair (null-pointer))
	  (values (mem-ref attrs :ulong) (mem-ref pair :short))))
;;------------------------------------------------------------------------------
(defcurse ("attr_set" attr-set :mv nil)
  (attrs :ULONG) ;;  #<typedef attr_t>
  (pair :SHORT) ;;  #<VBASE :short>
  (opts  (:pointer :VOID)) ;;  #<POINTER #<VBASE :void>>
  )
(defcurse ("attr_off" attr-off :mv nil)
  (attrs :ULONG) ;;  #<typedef attr_t>
  (opts  (:pointer :VOID)) ;;  #<POINTER #<VBASE :void>>
  )
(defcurse ("attr_on" attr-on :mv nil)
  (attrs :ULONG) ;;  #<typedef attr_t>
  (opts  (:pointer :VOID)) ;;  #<POINTER #<VBASE :void>>
  )
(defcurse ("attroff" attroff :mv nil) (attrs :ULONG) )
(defcurse ("attron"  attron  :mv nil) (attrs :ULONG) )
(defcurse ("attrset" attrset :mv nil) (attrs :ULONG) )
(defcurse ("chgat" chgat)
    (cnt :int)
  (attrs :ULONG) ;;  #<typedef attr_t>
  (pair :SHORT) ;;  #<VBASE :short>
  (opts  (:pointer :VOID)) ;;  #<POINTER #<VBASE :void>>
  )
(defcurse ("color-set" color-set)
  (pair :SHORT) ;;  #<VBASE :short>
  (opts  (:pointer :VOID)) ;;  #<POINTER #<VBASE :void>>
  )
(defcurse ("standend" standend :mv nil))
(defcurse ("standout" standout :mv nil))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_delch3x.html
(defcurse ("delch" delch))
;;http://invisible-island.net/ncurses/man/curs_deleteln.3x.html
(defcurse ("deleteln" deleteln :mv nil))
(defcurse ("insdelln" insdelln :mv nil) (cnt :int))
(defcurse ("insertln" insertln :mv nil))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_bkgd.3x.html
(defcurse ("bkgdset" bkgdset :mv nil :ret :void)  (ch :ulong))
(defcurse ("bkgd"    bkgd :mv nil :ret  :void) (ch :ulong))
(xdefcfun ("getbkgd" getbkgd) :ULONG
   (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_termattrs.3x.html
(xdefcfun ("baudrate"  baudrate) :INT)
(xdefcfun ("erasechar" erasechar) :CHAR)
(xdefcfun ("has_il"    has-il) (:BOOL))
(xdefcfun ("has_ic"    has-ic) (:BOOL))
(xdefcfun ("killchar"  killchar) :CHAR)
(xdefcfun ("longname"  longname) :STRING)
(xdefcfun ("termname"  termname) :STRING)
(xdefcfun ("termattrs" termattrs) :ULONG)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_color.3x.html
(xdefcfun ("start_color" start-color) :INT)
(xdefcfun ("has_colors"  has-colors) :BOOL)
(xdefcfun ("can_change_color" can-change-color) :BOOL)
(xdefcfun ("init_pair"   init-pair) :INT
	  (cnt  :SHORT)  (fg   :SHORT)  (bg   :SHORT))
(xdefcfun ("init_color"  init-color) :INT
	  (cnt  :SHORT)  (r :SHORT)  (g :SHORT) (b :SHORT))
;;------------------------------------------------------------------------------
(defcfun ("color_content" &color-content) :INT
  ;; see: (/usr/include/ncurses.h:607:28)
  (index  :SHORT) ;;  #<VBASE :short>
  (r (:pointer :SHORT)) ;;  #<POINTER #<VBASE :short>>
  (g (:pointer :SHORT)) ;;  #<POINTER #<VBASE :short>>
  (b (:pointer :SHORT)) ;;  #<POINTER #<VBASE :short>>
  )
(xdefun color-content (color-index)
  (with-foreign-objects ((r :short) (g :short) (b :short))
    (&color-content color-index r g b)
    (values (mem-ref r :short) (mem-ref g :short) (mem-ref b :short))))
;;------------------------------------------------------------------------------
(defcfun ("pair_content" &pair-content) :INT
  ;; see: (/usr/include/ncurses.h:732:28)
  (index  :SHORT) (fg  (:pointer :SHORT))  (bg (:pointer :SHORT)) )
(xdefun pair-content (pair-index)
  (with-foreign-objects ((fg :short) (bg :short) )
    (&pair-content pair-index fg bg)
    (values (mem-ref fg :short) (mem-ref bg :short) )))
;;------------------------------------------------------------------------------
(xdefcfun ("COLOR_PAIR"  color-pair) :INT  (pair-index  :INT) )
(xdefcfun ("PAIR_NUMBER" pair-number) :INT  (attrs  :INT) )
;;http://invisible-island.net/ncurses/man/default_colors.3x.html
(xdefcfun ("use_default_colors" use-default-colors) :INT)
(xdefcfun ("assume_default_colors" assume-default-colors) :INT
  (fg :INT) (bg :INT) )
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_overlay.3x.html
(xdefcfun ("overlay" overlay) :INT
  (src  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (dst  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  )
(xdefcfun ("overwrite" overwrite) :INT
  (src  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (dst  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
)
(xdefcfun ("copywin" copywin) :INT
  ;; see: (/usr/include/ncurses.h:610:28)
  (src  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (dst  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (sminrow  :INT) ;;  #<VBASE :int>
  (smincol  :INT) ;;  #<VBASE :int>
  (dminrow :INT) ;;  #<VBASE :int>
  (dmincol  :INT) ;;  #<VBASE :int>
  (dmaxrow  :INT) ;;  #<VBASE :int>
  (dmaxcol  :INT) ;;  #<VBASE :int>
  (overlay  :INT) ;;  #<VBASE :int>
)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_kernel.3x.html
(xdefcfun ("def_prog_mode" def-prog-mode) :INT)
(xdefcfun ("def_shell_mode" def-shell-mode) :INT)
(xdefcfun ("reset_prog_mode" reset-prog-mode) :INT)
(xdefcfun ("reset_shell_mode" reset-shell-mode) :INT)
(xdefcfun ("resetty" resetty) :INT)
(xdefcfun ("savetty" savetty) :INT)
(xdefcfun ("curs_set" curs-set) :INT  (visibility  :INT))
(xdefcfun ("napms" napms) :INT  (ms    :INT))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_window.3x.html
(xdefcfun ("newwin" newwin) (:pointer (:struct win))
	  (nlines  :INT) (ncols :int) (y :int) (x :int))
(xdefcfun ("delwin" delwin) :INT (win  (:pointer (:struct win))) )
(xdefcfun ("mvwin" mvwin) :int
	  (win (:pointer (:struct win)))
	  (y :int) (x :int))
(xdefcfun ("subwin" subwin) (:pointer (:struct win))
	  (win (:pointer (:struct win)))
  (nlines  :INT) (ncols :int) (y :int) (x :int))
(xdefcfun ("derwin" derwin) (:pointer (:struct win))
	  (win (:pointer (:struct win)))
  (nlines  :INT) (ncols :int) (off-y :int) (off-x :int))
(xdefcfun ("mvderwin" mvderwin) :int
	  (win (:pointer (:struct win)))
	  (y :int) (x :int))
(xdefcfun ("dupwin" dupwin) (:pointer (:struct win))
	  (win (:pointer (:struct win))))
(xdefcfun ("wsyncup" wsyncup) :void
	  (win (:pointer (:struct win))))
(xdefcfun ("syncok" syncok) :int
	  (win (:pointer (:struct win)))
	  (bf :BOOL))
(xdefcfun ("wcursyncup" wcursyncup) :void
	  (win (:pointer (:struct win))))
(xdefcfun ("wsyncdown" wsyncdown) :void
	  (win (:pointer (:struct win))))
;;http://invisible-island.net/ncurses/man/wresize.3x.html
(xdefcfun ("wresize" wresize) :INT
  (win  (:pointer (:struct win))) 
  (y  :INT)  (x  :INT)   )
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_opaque.3x.html
(xdefcfun ("is_cleared" is-cleared) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_idcok" is-idcok) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_idlok" is-idlok) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_immedok" is-immedok) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_keypad" is-keypad) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_leavok" is-leavok) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_nodelay" is-nodelay) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_notimeout" is-notimeout) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_pad" is-pad) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_scrollock" is-scrollock) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_subwin" is-subwin) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("is_syncok" is-syncok) (:BOOL)
	  (win  (:pointer (:struct win))))
(xdefcfun ("wgetparent" wgetparent) (:pointer (:struct win))
	  (win  (:pointer (:struct win))) )
(xdefcfun ("wgetdelay" wgetdelay) :int
	  (win  (:pointer (:struct win))) )
;;------------------------------------------------------------------------------
(xdefcfun ("wgetsrcreg" &wgetsrcreg) :int
	  (win  (:pointer (:struct win)))
	  (top (:pointer :int))
	  (bottom (:pointer :int)))
(xdefun wgetsrcreg (win)
  (with-foreign-objects ((top :int) (bottom :int))
    (&wgetsrcreg win top bottom)
    (values (mem-ref top :int) (mem-ref bottom :int))))
;;------------------------------------------------------------------------------

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_terminfo.3x.html
(xdefcfun ("tparm" tparm) :string
	  (str :string)
	  &rest)
(xdefcfun ("putp" putp) :INT
	  (str :string))

(defcfun ("vidputs" &vidputs) :INT
  ;; see: (/usr/include/ncurses.h:793:28)
  (attrs :ULONG) ;;  #<typedef chtype>
  (putc  :POINTER) ;;  #<typedef NCURSES_OUTC>
  )

(xdefcfun ("vidattr" vidattr) :INT
  ;; see: (/usr/include/ncurses.h:792:28)
  (attr  :ULONG) ;;  #<typedef chtype>
)
(xdefcfun ("mvcur" mvcur) :INT
  ;; see: (/usr/include/ncurses.h:673:28)
  (oldrow  :INT) ;;  #<VBASE :int>
  (oldcol  :INT) ;;  #<VBASE :int>
  (newrow  :INT) ;;  #<VBASE :int>
  (newcol  :INT) ;;  #<VBASE :int>
  )
(xdefcfun ("tigetflag" tigetflag) :INT (capname :string))
(xdefcfun ("tigetnum"  tigetnum)  :INT (capname :string))
(xdefcfun ("tigetstr"  tigetstr)  :string (capname :string))
(xdefcfun ("tiparm"    tiparm)    :string (capname :string) &rest)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_touch.3x.html
(xdefcfun ("touchwin" touchwin) :INT (win  (:pointer (:struct win))) )
(xdefcfun ("touchline" touchline) :INT
  (win  (:pointer (:struct win)))
  (start :int)
  (cnt   :int))
(xdefcfun ("untouchwin" untouchwin) :INT (win  (:pointer (:struct win))) )
(xdefcfun ("wtouchln" wtouchln) :INT
	  "changed: 1=changed 0=not"
  (win  (:pointer (:struct win)))
  (start :int)
  (cnt   :int)
  (changed :int))
(xdefcfun ("is_linetouched" is-linetouched) (:BOOL)
  ;; see: (/usr/include/ncurses.h:658:29)
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (line  :INT) ;;  #<VBASE :int>
  )

(xdefcfun ("is_wintouched" is-wintouched) (:BOOL)
  ;; see: (/usr/include/ncurses.h:658:29)
  (win  (:pointer (:struct win))))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_outopts.3x.html
(xdefcfun ("clearok" clearidlok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("idlok" idlok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("idcok" idcok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("immedok" immedok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("leaveok" leaveok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(defcurse ("setscrreg" setscrreg :mv nil) (top :int) (bot :int))

(xdefcfun ("scrollok" scrollok) :INT
  (win  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (bf  (:BOOL)) ;;  #<VBASE :_Bool>
  )
(xdefcfun ("nl" nl) :INT)
(xdefcfun ("nonl" nonl) :INT)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_pad.3x.html
(xdefcfun ("newpad" newpad) (:pointer (:struct win))
	  (lines :int) (columns :int))
(xdefcfun ("subpad" subpad) (:pointer (:struct win))
	  (orig (:pointer (:struct win)))
	  (nlines  :INT) (ncols :int) (y :int) (x :int))
(xdefcfun ("prefresh" prefresh):int
	  (pad (:pointer (:struct win)))
	  (py :INT) (px :int)
	  (sy1 :int) (sx1 :int)
	  (sy2 :int) (sx2 :int))
(xdefcfun ("pnoutrefresh" pnoutrefresh):int
	  (pad (:pointer (:struct win)))
	  (py :INT) (px :int)
	  (sy1 :int) (sx1 :int)
	  (sy2 :int) (sx2 :int))
(xdefcfun ("pechochar" pechochar) :INT
  (pad  (:pointer (:struct win)))
  (wch :ULONG) )

;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_beep.3x.html
(xdefcfun ("beep" beep) :INT)
(xdefcfun ("flash" flash) :INT)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_util.3x.html
(xdefcfun ("keyname" keyname) (:pointer :CHAR)
	  (key  :INT) )
(xdefcfun ("filter" filter) :VOID)
(xdefcfun ("nofilter" nofilter) :VOID)
(xdefcfun ("use_env" use-env) :VOID (flag :bool))
(xdefcfun ("use_tioctl" use-tioctl) :VOID (flag :bool))
(xdefcfun ("putwin" putwin):int
	  (win (:pointer (:struct win)))
	  (file :pointer ))
(xdefcfun ("getwin" getwin) (:pointer (:struct win))
	  (file :pointer ))
(xdefcfun ("delay_output" delay-output) :INT
	  (ms  :INT))
(xdefcfun ("flushinp" flushinp) :INT)
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_scr_dump.3x.html
(xdefcfun ("scr_dump" scr-dump) :INT
	  (filename :string))
(xdefcfun ("scr_restore" scr-restore) :INT
	  (filename :string))
(xdefcfun ("scr_init" scr-init) :INT
	  (filename :string))
(xdefcfun ("scr_set" scr-set) :INT
	  (filename :string))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_scroll.3x.html
(xdefcfun ("scroll" scroll) :INT
  (win  (:pointer (:struct win))) )

(defcurse ("scrl" scrl) (by :int))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_slk.3x.html
(xdefcfun ("slk_init"    slk-init) :INT
   (fmt  :INT) )
(xdefcfun ("slk_set"     slk-set) :INT
	  (labnum  :INT) (label :string) (format :int))
(xdefcfun ("slk_label"   slk-label) :string
	  (labnum  :INT) )
(xdefcfun ("slk_refresh" slk-refresh) :int)
(xdefcfun ("slk_noutrefresh" slk-noutrefresh) :int)
(xdefcfun ("slk_clear" slk-clear) :int)
(xdefcfun ("slk_restore" slk-restore) :int)
(xdefcfun ("slk_touch" slk-touch) :int)
(xdefcfun ("slk_attron" slk-attron) :int
	  (attrs :ulong))
(xdefcfun ("slk_attroff" slk-attroff) :int
	  (attrs :ulong))
(xdefcfun ("slk_attrset" slk-attrset) :int
	  (attrs :ulong))
(xdefcfun ("slk_attr_on" slk-attr-on) :int
	  (attrs :ulong)
	  (options :pointer))
(xdefcfun ("slk_attr_off" slk-attr-off) :int
	  (attrs :ulong)
	  (options :pointer))
(xdefcfun ("slk_attr_set" slk-attr-set) :int
	  (attrs :ulong)
	  (pair :short)
	  (options :pointer))
(xdefcfun ("slk_attr" slk-attr) :ulong)
(xdefcfun ("slk_color" slk-color) :int
	  (pair :short))

;;==============================================================================
;;http://invisible-island.net/ncurses/man/resizeterm.3x.html
;;
(xdefcfun ("is_term_resized" is-term-resized) (:BOOL)
	  (lines  :INT) (columns :int))
(xdefcfun ("resize_term" resize-term) :int
	  (lines  :INT) (columns :int))
(xdefcfun ("resizeterm" resizeterm) :int
	  (lines  :INT) (columns :int))


;;==============================================================================
;;http://invisible-island.net/ncurses/man/keybound.3x.html
(xdefcfun ("keybound" keybound) :pointer
  ;; see: (/usr/include/ncurses.h:902:31)
  (keycode :int) (count :int))
;;
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_extend.3x.html
(xdefcfun ("curses_version" curses-version) :string)
(xdefcfun ("use_extended_names" use-extended-names) :INT
  (flag  (:BOOL)) )
;;==============================================================================
;;http://invisible-island.net/ncurses/man/define_key.3x.html
(xdefcfun ("define_key" define-key) :INT
  (definition :string)
  (keycode  :INT) )
;;http://invisible-island.net/ncurses/man/key_defined.3x.html
(xdefcfun ("key_defined" key-defined) :INT
	  (definition :string) )
;;http://invisible-island.net/ncurses/man/keyok.3x.html
(xdefcfun ("keyok" keyok) :INT
	  (keycode :INT) (enable :BOOL))

;;http://invisible-island.net/ncurses/man/legacy_coding.3x.html
(xdefcfun ("use_legacy_coding" use-legacy-coding) :INT
  (level  :INT))
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_mouse.3x.html
(defcstruct mevent ;; _MEVENT
  (id  :SHORT) ;; id #<VBASE :short>
  (x  :INT) ;; x #<VBASE :int>
  (y  :INT) ;; y #<VBASE :int>
  (z  :INT) ;; z #<VBASE :int>
  (bstate  :ULONG) ;; bstate #<typedef mmask_t>
)
(export 'mevent)

(xdefcfun ("has_mouse" has-mouse) (:BOOL))
;;------------------------------------------------------------------------------
(xdefcfun ("getmouse" &getmouse) :INT
	  (pmevent  (:pointer (:struct mevent))))
(xdefun getmouse ()
	(with-foreign-object (mev '(:struct mevent))
	  (&getmouse mev)
	  (with-foreign-slots ((id x y z) mev (:struct mevent))
	    (values x y z id))))
;;------------------------------------------------------------------------------
(defcfun ("ungetmouse" &ungetmouse) :INT
  ;; see: (/usr/include/ncurses.h:1623:32)
  (pmevent  (:pointer (:struct mevent))))

(defcfun ("mousemask" &mousemask) :ULONG
  (newmask  :ULONG) ;;  #<typedef mmask_t>
  (oldmask  (:pointer :ULONG))   )

(xdefcfun ("wenclose" wenclose) (:BOOL)
  (win  (:pointer (:struct win))) 
  (y  :INT)  (x  :INT)  )

(defcfun ("mouse_trafo" mouse-trafo) (:BOOL)
  ;; see: (/usr/include/ncurses.h:1628:32)
  (py (:pointer :INT))  (px (:pointer :INT))
  (to-screen :BOOL) )

(defcfun ("wmouse_trafo" wmouse-trafo) (:BOOL)
  (win  (:pointer (:struct win))) 
  (py (:pointer :INT))  (px (:pointer :INT))
  (to-screen :BOOL) )

(xdefcfun ("mouseinterval" mouseinterval) :INT
  (ms  :INT) )
;;==============================================================================
;;http://invisible-island.net/ncurses/man/curs_print.3x.html
;;
(defcfun ("mcprint" &mcprint) :INT
  (win  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
  (length  :INT)		   ;;  #<VBASE :int>
  )
;;==============================================================================
;; Input             http://invisible-island.net/ncurses/man/curs_instr.3x.html
;;
;; not too useful as we don't know the size...
;;(defcurse ("instr" instr&) (buf (:pointer :char)))
(defcurse ("innstr" innstr&) (buf (:pointer :char)) (cnt :int))
(xdefun innstr (cnt)
    (with-foreign-object (buf :char (1+ cnt))
    (innstr& buf cnt)
    (foreign-string-to-lisp buf)))
(xdefun winnstr (window cnt)
	(with-foreign-object (buf :char (1+ cnt))
    (winnstr& window buf cnt)
    (foreign-string-to-lisp buf)))
(xdefun mvinnstr (y x cnt)
	(with-foreign-object (buf :char (1+ cnt))
    (mvinnstr& y x buf cnt)
    (foreign-string-to-lisp buf)))
(xdefun wmvinnstr (window y x cnt)
	(with-foreign-object (buf :char (1+ cnt))
    (mvwinnstr& window y x buf cnt)
    (foreign-string-to-lisp buf)))
;;http://invisible-island.net/ncurses/man/curs_inchstr.3x.html
;;(defcurse ("inchstr" inchstr&) (buf (:pointer :ulong)))
(defcurse ("inchnstr" inchnstr&) (buf (:pointer :ulong)) (cnt :int))
(xdefun inchnstr (cnt)
	(with-foreign-object (buf :ulong (1+ cnt))
	  (let ((result  (inchnstr& buf cnt)))
	    (foreign-array-to-lisp buf `(:array :ulong ,cnt)))))

;;==============================================================================
;;==============================================================================
;;==============================================================================
;;==============================================================================
;;==============================================================================
;;==============================================================================
;;==============================================================================
;;==============================================================================



















;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:826:28)
;;
(declaim (inline &wgetstr))
(defcfun ("wgetstr" &wgetstr) :INT
  ;; see: (/usr/include/ncurses.h:826:28)
  (arg1  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (arg2  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
)
(export '&wgetstr)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:825:28)
;;
(declaim (inline &wgetnstr))
(defcfun ("wgetnstr" &wgetnstr) :INT
  ;; see: (/usr/include/ncurses.h:825:28)
  (arg1  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (arg2  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
  (arg3  :INT) ;;  #<VBASE :int>
)
(export '&wgetnstr)





;; (/usr/include/ncurses.h:702:28)
;;
(declaim (inline &mvwgetstr))
(defcfun ("mvwgetstr" &mvwgetstr) :INT
  ;; see: (/usr/include/ncurses.h:702:28)
  (arg1  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (arg2  :INT) ;;  #<VBASE :int>
  (arg3  :INT) ;;  #<VBASE :int>
  (arg4  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
)
(export '&mvwgetstr)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:701:28)
;;
(declaim (inline &mvwgetnstr))
(defcfun ("mvwgetnstr" &mvwgetnstr) :INT
  ;; see: (/usr/include/ncurses.h:701:28)
  (arg1  (:pointer (:struct win))) ;;  #<POINTER #<typedef WINDOW>>
  (arg2  :INT) ;;  #<VBASE :int>
  (arg3  :INT) ;;  #<VBASE :int>
  (arg4  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
  (arg5  :INT) ;;  #<VBASE :int>
)
(export '&mvwgetnstr)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:678:28)
;;
(declaim (inline &mvgetstr))
(defcfun ("mvgetstr" &mvgetstr) :INT
  ;; see: (/usr/include/ncurses.h:678:28)
  (arg1  :INT) ;;  #<VBASE :int>
  (arg2  :INT) ;;  #<VBASE :int>
  (arg3  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
)
(export '&mvgetstr)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:677:28)
;;
(declaim (inline &mvgetnstr))
(defcfun ("mvgetnstr" &mvgetnstr) :INT
  ;; see: (/usr/include/ncurses.h:677:28)
  (arg1  :INT) ;;  #<VBASE :int>
  (arg2  :INT) ;;  #<VBASE :int>
  (arg3  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
  (arg4  :INT) ;;  #<VBASE :int>
)
(export '&mvgetnstr)




;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:633:28)
;;
(declaim (inline &getstr))
(defcfun ("getstr" &getstr) :INT
  ;; see: (/usr/include/ncurses.h:633:28)
  (arg1  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
)
(export '&getstr)


;;------------------------------------------------------------------------------
;; (/usr/include/ncurses.h:632:28)
;;
(declaim (inline &getnstr))
(defcfun ("getnstr" &getnstr) :INT
  ;; see: (/usr/include/ncurses.h:632:28)
  (arg1  (:pointer :CHAR)) ;;  #<POINTER #<VBASE :char>>
  (arg2  :INT) ;;  #<VBASE :int>
)
(export '&getnstr)


